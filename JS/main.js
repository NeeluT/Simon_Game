/*----- constants -----*/
//None

/*----- state variables -----*/

// creating an array to keep track of the computer sequence of tile clicks
let sequence = [];

// creating an array to keep track of the player sequence of tile clicks
let playerSequence = [];

//set level to 0 since the player has not played any levels yet
let level = 0;

/*----- cached elements  -----*/

const startButton = document.querySelector('#start-button');
const message = document.querySelector('#message');
const levelMessage = document.querySelector('h2');
const board = document.querySelector('#board');
const gameOver = document.querySelector('#gameOver')

/*----- event listeners -----*/
//Add even listerner to start button so that it starts the game by unning clickStart function
startButton.addEventListener('click', clickStart);

//Add event listener to the tiles on the board 
board.addEventListener('click', handleClick)

//Add event listener to the game over message
gameOver.addEventListener('click', hideDisplay)


/*----- functions -----*/

function hideDisplay() {
  gameOver.setAttribute("style", "display: none")
}
//when start button is clicked, hide this button
// If the order does not match and the game resets
// Run the original stateof he game
function clickStart() {
  startButton.classList.add('hidden');
  message.classList.remove('hidden');
  nextRound();
}

// compare the order in which the player taps the buttons to the order of the sequence generated by the computer
function resetGame() {
  sequence = [];
  playerSequence = [];
  level = 0;
  startButton.classList.remove('hidden');
  levelMessage.textContent = '';
  message.classList.add('hidden');
  board.classList.add('unclickable');
}

// remove the unclickable class from the board
//update message to show it's player turn and the number of taps the player need to make
function playerTurn(level) {
  board.classList.remove('unclickable');
  message.textContent = `Your turn: ${level} Tap${level > 1 ? 's' : ''}`;
}


// Activate the tiles on the screen
//Select appropriate audio element and play it
function activateTile(color) {
  const tile = document.querySelector(`[data-tile='${color}']`);
  const sound = document.querySelector(`[data-sound='${color}']`);

  tile.classList.add('activated');
  sound.play();

  setTimeout(() => {
    tile.classList.remove('activated');
  }, 300);
}

// Loop through the newly created sequence and call activateTile on each picked tile and setup delays so that each style change can be seen
function playRound(nextSequence) {
  nextSequence.forEach((color, index) => {
    setTimeout(() => {
      activateTile(color);
    }, (index + 1) * 600);
  });
}

// pick a random tile and return it
// A tile value is picked that corresponds to the data-tile property in the html
function nextStep() {
  const tiles = ['red', 'green', 'blue', 'yellow'];
  const random = tiles[Math.floor(Math.random() * tiles.length)];
  return random;
}

// increase level by 1, make the board unclickable and show the new level
// create a new sequence by grabing the random return of nextStep function
// Add a delay before playerTurn is run to make sure computer is done with the taps
function nextRound() {

  message.textContent = "Computer's Turn";
  level += 1;
  board.classList.add('unclickable');
  levelMessage.textContent = `Level ${level} of 35`;

  const nextSequence = [...sequence];
  nextSequence.push(nextStep());
  playRound(nextSequence);

  sequence = [...nextSequence];
  setTimeout(() => {
    playerTurn(level);
  }, level * 600 + 1000);
}

// pushes the tile value to the playerSequence array and stores its index in the index variable
// Play the corresponding sound for the button that is played
// compare the order in which the player taps the buttons to the order of the sequence generated by the computer
// Detemine if all levels are played and show a congrats message where the player wins the game after 35 rounds
// Reset the Sequence array and call the nextRound() function after one second if we are not at 35th round yet

function handleClick(event) {
  // retrieves the data-tile object of the clicked element 
  const value = event.target.dataset;

  // extracts the value of the data-tile
  const tile = value.tile;

  // check if the clicked element has a data-tile attribute
  if (tile) {

    // add the tile value to the playerSequence
    const index = playerSequence.push(tile) - 1;
    const sound = document.querySelector(`[data-sound='${tile}']`);
    sound.play();

    if (playerSequence[index] !== sequence[index]) {
      resetGame();
      gameOver.setAttribute("style" , "display: flex")
      return;
    }

    if (playerSequence.length === sequence.length) {
      message.textContent = '';
      if (playerSequence.length === 35) {
        message.textContent = 'Congrats! You completed all the levels';
        resetGame();
        return;
      }

      playerSequence = [];
      setTimeout(() => {
        nextRound();
      }, 1000);
      return;
    }
  }
}

